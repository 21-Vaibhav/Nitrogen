import { Hono } from "hono";
import { prisma } from "../index.js";

export const restaurantRoutes = new Hono();

// Register a new restaurant
restaurantRoutes.post("/", async (c) => {
  try {
    const { name, location } = await c.req.json();

    // Basic validation
    if (!name || !location) {
      return c.json({ error: "Missing required fields" }, 400);
    }

    const restaurant = await prisma.restaurant.create({
      data: {
        name,
        location,
      },
    });

    return c.json({ data: restaurant }, 201);
  } catch (error) {
    console.error("Error creating restaurant:", error);
    return c.json({ error: "Failed to create restaurant" }, 500);
  }
});

// Get all available menu items from a restaurant
restaurantRoutes.get("/:id/menu", async (c) => {
  try {
    const id = parseInt(c.req.param("id"));

    const menuItems = await prisma.menuItem.findMany({
      where: {
        restaurantId: id,
        isAvailable: true,
      },
    });

    return c.json({ data: menuItems });
  } catch (error) {
    console.error("Error fetching restaurant menu:", error);
    return c.json({ error: "Failed to fetch restaurant menu" }, 500);
  }
});

// Add a menu item to a restaurant
restaurantRoutes.post("/:id/menu", async (c) => {
  try {
    const restaurantId = parseInt(c.req.param("id"));
    const { name, price, isAvailable = true } = await c.req.json();

    // Basic validation
    if (!name || price === undefined) {
      return c.json({ error: "Missing required fields" }, 400);
    }

    // Check if restaurant exists
    const restaurant = await prisma.restaurant.findUnique({
      where: { id: restaurantId },
    });

    if (!restaurant) {
      return c.json({ error: "Restaurant not found" }, 404);
    }

    const menuItem = await prisma.menuItem.create({
      data: {
        name,
        price,
        isAvailable,
        restaurantId,
      },
    });

    return c.json({ data: menuItem }, 201);
  } catch (error) {
    console.error("Error creating menu item:", error);
    return c.json({ error: "Failed to create menu item" }, 500);
  }
});

// Get total revenue generated by a restaurant
restaurantRoutes.get("/:id/revenue", async (c) => {
  try {
    const id = parseInt(c.req.param("id"));

    // Check if restaurant exists
    const restaurant = await prisma.restaurant.findUnique({
      where: { id },
    });

    if (!restaurant) {
      return c.json({ error: "Restaurant not found" }, 404);
    }

    const result = await prisma.order.aggregate({
      where: {
        restaurantId: id,
        status: { not: "Cancelled" },
      },
      _sum: {
        totalPrice: true,
      },
    });

    return c.json({
      data: {
        restaurantId: id,
        restaurantName: restaurant.name,
        totalRevenue: result._sum.totalPrice || 0,
      },
    });
  } catch (error) {
    console.error("Error calculating restaurant revenue:", error);
    return c.json({ error: "Failed to calculate restaurant revenue" }, 500);
  }
});
